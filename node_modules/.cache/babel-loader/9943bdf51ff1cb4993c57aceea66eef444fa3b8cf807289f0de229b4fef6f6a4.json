{"ast":null,"code":"var _jsxFileName = \"C:\\\\haltian\\\\greenhouse\\\\src\\\\screens\\\\Forecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Forecast = () => {\n  _s();\n  const [forecastData, setForecastData] = useState(null);\n  const apiKey = 'dd8e3a1525d8c554ba445de6cd6460cd';\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/forecast?id=643492&appid=${apiKey}&units=metric`);\n        const data = await response.json();\n        setForecastData(data);\n      } catch (error) {\n        console.error('Error fetching weather forecast:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weather Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), forecastData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [forecastData.city ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"City: \", forecastData.city.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Country: \", forecastData.city.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"City information not available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Forecast:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: forecastData.list && forecastData.list.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item.dt_txt, \": \", item.main.temp, \" \\xB0C\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Forecast, \"GdGwGAc3aRVLQYYssTOULQ2pgt0=\");\n_c = Forecast;\nexport default Forecast;\nvar _c;\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Forecast","_s","forecastData","setForecastData","apiKey","fetchData","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","city","name","country","list","map","item","index","dt_txt","main","temp","_c","$RefreshReg$"],"sources":["C:/haltian/greenhouse/src/screens/Forecast.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Forecast = () => {\r\n  const [forecastData, setForecastData] = useState(null);\r\n\r\n  const apiKey = 'dd8e3a1525d8c554ba445de6cd6460cd';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n            `http://api.openweathermap.org/data/2.5/forecast?id=643492&appid=${apiKey}&units=metric`\r\n        );\r\n        const data = await response.json();\r\n        setForecastData(data);\r\n      } catch (error) {\r\n        console.error('Error fetching weather forecast:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Weather Forecast</h2>\r\n      {forecastData ? (\r\n        <div>\r\n          {forecastData.city ? (\r\n            <div>\r\n              <p>City: {forecastData.city.name}</p>\r\n              <p>Country: {forecastData.city.country}</p>\r\n            </div>\r\n          ) : (\r\n            <p>City information not available</p>\r\n          )}\r\n          <h3>Forecast:</h3>\r\n          <ul>\r\n            {forecastData.list && forecastData.list.map((item, index) => (\r\n              <li key={index}>\r\n                {item.dt_txt}: {item.main.temp} Â°C\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMQ,MAAM,GAAG,kCAAkC;EAEjDP,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACvB,mEAAkEH,MAAO,eAC9E,CAAC;QACD,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCN,eAAe,CAACK,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBd,YAAY,gBACXH,OAAA;MAAAa,QAAA,GACGV,YAAY,CAACe,IAAI,gBAChBlB,OAAA;QAAAa,QAAA,gBACEb,OAAA;UAAAa,QAAA,GAAG,QAAM,EAACV,YAAY,CAACe,IAAI,CAACC,IAAI;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrCjB,OAAA;UAAAa,QAAA,GAAG,WAAS,EAACV,YAAY,CAACe,IAAI,CAACE,OAAO;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,gBAENjB,OAAA;QAAAa,QAAA,EAAG;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACrC,eACDjB,OAAA;QAAAa,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBjB,OAAA;QAAAa,QAAA,EACGV,YAAY,CAACkB,IAAI,IAAIlB,YAAY,CAACkB,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACtDxB,OAAA;UAAAa,QAAA,GACGU,IAAI,CAACE,MAAM,EAAC,IAAE,EAACF,IAAI,CAACG,IAAI,CAACC,IAAI,EAAC,QACjC;QAAA,GAFSH,KAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAENjB,OAAA;MAAAa,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACf,EAAA,CAhDID,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAkDd,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}