{"ast":null,"code":"var _jsxFileName = \"C:\\\\haltian\\\\greenhouse\\\\src\\\\screens\\\\Forecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Forecast = () => {\n  _s();\n  const [forecastData, setForecastData] = useState(null);\n  const apiKey = 'dd8e3a1525d8c554ba445de6cd6460cd';\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://api.openweathermap.org/data/2.5/forecast?id=643492&appid=${apiKey}&units=metric`);\n        const data = await response.json();\n        setForecastData(data);\n      } catch (error) {\n        console.error('Error fetching weather forecast:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    return `${day < 10 ? '0' + day : day}.${month < 10 ? '0' + month : month}.${year}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forecast-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"forecast-heading\",\n      children: \"Weather Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), forecastData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [forecastData.city ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"forecast-city\",\n          children: [\"City: \", forecastData.city.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"forecast-country\",\n          children: [\"Country: \", forecastData.city.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"City information not available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"forecast-subheading\",\n        children: \"Forecast:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"forecast-list\",\n        children: forecastData.list && forecastData.list.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"forecast-item\",\n          children: [formatDate(item.dt_txt), \": Temperature: \", item.main.temp, \" \\xB0C, Humidity: \", item.main.humidity, \"%, Weather: \", item.weather[0].description]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Forecast, \"GdGwGAc3aRVLQYYssTOULQ2pgt0=\");\n_c = Forecast;\nexport default Forecast;\nvar _c;\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Forecast","_s","forecastData","setForecastData","apiKey","fetchData","response","fetch","data","json","error","console","formatDate","dateString","date","Date","day","getDate","month","getMonth","year","getFullYear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","city","name","country","list","map","item","index","dt_txt","main","temp","humidity","weather","description","_c","$RefreshReg$"],"sources":["C:/haltian/greenhouse/src/screens/Forecast.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../App.css'; \r\n\r\nconst Forecast = () => {\r\n  const [forecastData, setForecastData] = useState(null);\r\n\r\n  const apiKey = 'dd8e3a1525d8c554ba445de6cd6460cd';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n            `http://api.openweathermap.org/data/2.5/forecast?id=643492&appid=${apiKey}&units=metric`\r\n        );\r\n        const data = await response.json();\r\n        setForecastData(data);\r\n      } catch (error) {\r\n        console.error('Error fetching weather forecast:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const day = date.getDate();\r\n    const month = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n    return `${day < 10 ? '0' + day : day}.${month < 10 ? '0' + month : month}.${year}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"forecast-container\">\r\n      <h2 className=\"forecast-heading\">Weather Forecast</h2>\r\n      {forecastData ? (\r\n        <div>\r\n          {forecastData.city ? (\r\n            <div>\r\n              <p className=\"forecast-city\">City: {forecastData.city.name}</p>\r\n              <p className=\"forecast-country\">Country: {forecastData.city.country}</p>\r\n            </div>\r\n          ) : (\r\n            <p>City information not available</p>\r\n          )}\r\n          <h3 className=\"forecast-subheading\">Forecast:</h3>\r\n          <ul className=\"forecast-list\">\r\n            {forecastData.list && forecastData.list.map((item, index) => (\r\n              <li key={index} className=\"forecast-item\">\r\n                {formatDate(item.dt_txt)}: Temperature: {item.main.temp} Â°C, Humidity: {item.main.humidity}%, Weather: {item.weather[0].description}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMQ,MAAM,GAAG,kCAAkC;EAEjDP,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACvB,mEAAkEH,MAAO,eAC9E,CAAC;QACD,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCN,eAAe,CAACK,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,UAAU,GAAIC,UAAU,IAAK;IACjC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,MAAMG,GAAG,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC;IAC1B,MAAMC,KAAK,GAAGJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC;IACjC,MAAMC,IAAI,GAAGN,IAAI,CAACO,WAAW,CAAC,CAAC;IAC/B,OAAQ,GAAEL,GAAG,GAAG,EAAE,GAAG,GAAG,GAAGA,GAAG,GAAGA,GAAI,IAAGE,KAAK,GAAG,EAAE,GAAG,GAAG,GAAGA,KAAK,GAAGA,KAAM,IAAGE,IAAK,EAAC;EACpF,CAAC;EAED,oBACErB,OAAA;IAAKuB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjCxB,OAAA;MAAIuB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrDzB,YAAY,gBACXH,OAAA;MAAAwB,QAAA,GACGrB,YAAY,CAAC0B,IAAI,gBAChB7B,OAAA;QAAAwB,QAAA,gBACExB,OAAA;UAAGuB,SAAS,EAAC,eAAe;UAAAC,QAAA,GAAC,QAAM,EAACrB,YAAY,CAAC0B,IAAI,CAACC,IAAI;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/D5B,OAAA;UAAGuB,SAAS,EAAC,kBAAkB;UAAAC,QAAA,GAAC,WAAS,EAACrB,YAAY,CAAC0B,IAAI,CAACE,OAAO;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC,gBAEN5B,OAAA;QAAAwB,QAAA,EAAG;MAA8B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACrC,eACD5B,OAAA;QAAIuB,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClD5B,OAAA;QAAIuB,SAAS,EAAC,eAAe;QAAAC,QAAA,EAC1BrB,YAAY,CAAC6B,IAAI,IAAI7B,YAAY,CAAC6B,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACtDnC,OAAA;UAAgBuB,SAAS,EAAC,eAAe;UAAAC,QAAA,GACtCX,UAAU,CAACqB,IAAI,CAACE,MAAM,CAAC,EAAC,iBAAe,EAACF,IAAI,CAACG,IAAI,CAACC,IAAI,EAAC,oBAAe,EAACJ,IAAI,CAACG,IAAI,CAACE,QAAQ,EAAC,cAAY,EAACL,IAAI,CAACM,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;QAAA,GAD5HN,KAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAEN5B,OAAA;MAAAwB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAxDID,QAAQ;AAAAyC,EAAA,GAARzC,QAAQ;AA0Dd,eAAeA,QAAQ;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}